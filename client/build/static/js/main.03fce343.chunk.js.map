{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","data","cityInput","weather","cityInputOnChangeHandler","e","setState","target","value","submitButtonHandler","a","fetch","response","json","body","status","Error","message","console","log","hourly","getIcon","forecast","className","dataMap","this","map","dateTimeString","DateTime","fromSeconds","time","toFormat","summary","icon","Math","round","precipProbability","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,mOC0E5BC,E,2MAhEbC,MAAQ,CACNC,KAAM,KACNC,UAAW,GACXC,QAAS,I,EAGXC,yBAA2B,SAAAC,GACzB,EAAKC,SAAS,CAAEJ,UAAWG,EAAEE,OAAOC,S,EAEtCC,oB,qBAAsB,8BAAAC,EAAA,qEACGC,MAAM,eAAD,OAAgB,EAAKX,MAAME,YADnC,cACdU,EADc,gBAEDA,EAASC,OAFR,UAEdC,EAFc,OAGI,MAApBF,EAASG,OAHO,sBAIZC,MAAMF,EAAKG,SAJC,OAMpBC,QAAQC,IAAIL,EAAKM,OAAOnB,MACxB,EAAKK,SAAS,CAAEH,QAASW,EAAKM,OAAOnB,OAPjB,0C,EAUtBoB,QAAU,SAAAC,GAER,OADAJ,QAAQC,IAAIG,EAAU,SACdA,GACN,IAAK,SACH,OAAO,uBAAGC,UAAU,iBACtB,IAAK,OACH,OAAO,uBAAGA,UAAU,eACtB,IAAK,oBACH,OAAO,uBAAGA,UAAU,qBACtB,IAAK,sBACH,OAAO,uBAAGA,UAAU,uBACtB,IAAK,YACH,OAAO,uBAAGA,UAAU,oBACtB,IAAK,cACH,OAAO,uBAAGA,UAAU,sBACtB,QACE,OAAO,O,wEAIH,IAAD,OACDC,EAAUC,KAAKzB,MAAMG,QAAQuB,IAAI,SAAAlB,GACrC,IAAMmB,EAAiBC,IAASC,YAAYrB,EAAMsB,MAAMC,SAAS,OACjE,OACE,yBAAKR,UAAU,eACb,4BAAKI,GACL,4BAAKnB,EAAMwB,SACV,EAAKX,QAAQb,EAAMyB,MACpB,+CACmBC,KAAKC,MAAgC,IAA1B3B,EAAM4B,mBAA2B,QAKrE,OACE,yBAAKb,UAAU,gBACb,wBAAIA,UAAU,SAAd,yBACA,2BAAOc,SAAUZ,KAAKrB,2BACtB,4BAAQkC,QAASb,KAAKhB,qBAAtB,mBACA,yBAAKc,UAAU,kBAAkBC,Q,GA3DvBe,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.03fce343.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n// import \"./weather-icons-wind.min.css\";\n// import \"./weather-icons.min.css\";\nimport \"./weatherIcons/weather-icons-wind.css\";\nimport \"./weatherIcons/weather-icons.css\";\nimport DateTime from \"luxon/src/datetime.js\";\n\nclass App extends Component {\n  state = {\n    data: null,\n    cityInput: \"\",\n    weather: []\n  };\n\n  cityInputOnChangeHandler = e => {\n    this.setState({ cityInput: e.target.value });\n  };\n  submitButtonHandler = async () => {\n    const response = await fetch(`/weatherAPI/${this.state.cityInput}`);\n    const body = await response.json();\n    if (response.status !== 200) {\n      throw Error(body.message);\n    }\n    console.log(body.hourly.data);\n    this.setState({ weather: body.hourly.data });\n  };\n\n  getIcon = forecast => {\n    console.log(forecast, \" test\");\n    switch (forecast) {\n      case \"cloudy\":\n        return <i className=\"wi wi-cloudy\" />;\n      case \"rain\":\n        return <i className=\"wi wi-rain\" />;\n      case \"partly-cloudy-day\":\n        return <i className=\"wi wi-day-cloudy\" />;\n      case \"partly-cloudy-night\":\n        return <i className=\"wi wi-night-cloudy\" />;\n      case \"clear-day\":\n        return <i className=\"wi wi-day-sunny\" />;\n      case \"clear-night\":\n        return <i className=\"wi wi-night-clear\" />;\n      default:\n        return null;\n    }\n  };\n\n  render() {\n    const dataMap = this.state.weather.map(value => {\n      const dateTimeString = DateTime.fromSeconds(value.time).toFormat(\"h a\");\n      return (\n        <div className=\"weatherCard\">\n          <h1>{dateTimeString}</h1>\n          <h2>{value.summary}</h2>\n          {this.getIcon(value.icon)}\n          <h3>\n            Chance of rain: {Math.round(value.precipProbability * 100) + \"%\"}\n          </h3>\n        </div>\n      );\n    });\n    return (\n      <div className=\"appContainer\">\n        <h1 className='title'>Enter City Only Below</h1>\n        <input onChange={this.cityInputOnChangeHandler} />\n        <button onClick={this.submitButtonHandler}>Request Weather</button>\n        <div className=\"weatherInfoDiv\">{dataMap}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}